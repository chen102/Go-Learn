package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"sync"
)

var o sync.Mutex
var count int

func main() {
	//http.HandleFunc("/", handler)
	http.HandleFunc("/", handler1)
	http.HandleFunc("/count", counter)
	http.HandleFunc("/get", Get)
	http.HandleFunc("/get1", Get1)
	http.HandleFunc("/post", handlePostForm)
	http.HandleFunc("/postjson", PostJson)

	log.Fatal(http.ListenAndServe("192.168.110.221:8001", nil))
}
func handler(w http.ResponseWriter, r *http.Request) {
	o.Lock()
	count++
	o.Unlock()
	fmt.Fprintf(w, "URL.Path=%q\n", r.URL.Path)
}
func counter(w http.ResponseWriter, r *http.Request) {
	o.Lock()
	fmt.Fprintf(w, "Count:%d", count)
	o.Unlock()
}
func handler1(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "%s %s %s\n", r.Method, r.URL, r.Proto)
	for k, v := range r.Header {
		fmt.Fprintf(w, "Header[%q] = %q\n", k, v)
	}
	fmt.Fprintf(w, "Host = %q\n", r.Host)
	fmt.Fprintf(w, "RemoteAddr = %q\n", r.RemoteAddr)
	if err := r.ParseForm(); err != nil {
		log.Print(err)
	}
	for k, v := range r.Form {
		fmt.Fprintf(w, "Form[%q] = %q\n", k, v)
	}
}

//接收GET请求
func Get(writer http.ResponseWriter, request *http.Request) {
	query := request.URL.Query() //返回数组
	// 第一种方式
	// id := query["id"][0]
	// 第二种方式
	id := query.Get("id")
	log.Printf("GET: id=%s\n", id)
	fmt.Fprintf(writer, `{"code":0}`)
}

//http://192.168.110.221:8001/get1?id=123456&name=cdajklhgb
func Get1(writer http.ResponseWriter, request *http.Request) {

	result := make(map[string]string)
	keys := request.URL.Query()
	for k, v := range keys {
		result[k] = v[0]
	}
	log.Println(result)
}
func handlePostForm(writer http.ResponseWriter, request *http.Request) {
	request.ParseForm()
	// 第一种方式
	// username := request.Form["username"][0]
	// password := request.Form["password"][0]
	// 第二种方式
	username := request.Form.Get("username")
	password := request.Form.Get("password")
	fmt.Printf("POST form-urlencoded: username=%s, password=%s\n", username, password)
	fmt.Fprintf(writer, `{"code":0}`)
}

//AutoGenerated 结构体
type AutoGenerated struct {
	Resultcode string `json:"resultcode"`
	Reason     string `json:"reason"`
	Result     struct {
		Province string `json:"province"`
		City     string `json:"city"`
		Areacode string `json:"areacode"`
		Zip      string `json:"zip"`
		Company  string `json:"company"`
		Card     string `json:"card"`
	} `json:"result"`
}

func PostJson(w http.ResponseWriter, r *http.Request) {

	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Println(err)
	}
	log.Printf("%s", body)

	var data AutoGenerated
	json.Unmarshal([]byte(body), &data)

	//Json结构返回
	json, _ := json.Marshal(data)
	w.Write(json)

}
